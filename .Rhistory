group = factor(c(1, 1,1, 2, 2, 2))
group
x <- ~group
x
print(x)
x <- ~ 0+group
x
model.matrix(~0+group)
model.matrix(~group)
getwd()
setwd("D:/proj_epigen/aging_clocks")
library(rjson)
# This is a refactored version of all the bash scripts used before.
# imports
library(tidyverse)
library(rjson)
# load config.json file
params <- fromJSON(file="config.json")
name <- params["name"]
name <- params[["name"]
name <- params[["name"]]
name <- params[["name"]]
G4_file_plus <- params[["G4_file_plus"]]
G4_file_minus <- params[["G4_file_minus"]]
chain_file <- params[["chain_file"]]
genome_file <- params[["genome_file"]]
# load config.json file
params <- fromJSON(file="config.json")
window_sizes <- params["window_sizes"]
window_sizes <- params[["window_sizes"]]
# load config.json file
params <- fromJSON(file="config.json")
window_sizes <- params[["window_sizes"]]
window_size_CpG_dist_plot <- params[["window_size_CpG_dist_plot"]]
all_CpGs_file <- params[["all_CpGs_file"]]
library(stringr)
# FUNCTIONS
# function to convert numeric chromosome number to .bed file chromosome string (e.g.:"chr1")
chr_string <- function(number) {
if (is.integer(number)){
char <- as.character(number)
chromosome = paste("chr", char, sep = "")
}
else if (str_detect(number, "chr")[1])
chromosome = number
else{
chromosome=NaN
}
return(chromosome)
}
source(functions.R)
source("functions.R")
overlap("a", "b")
# load config.json file
params <- fromJSON(file="config.json")
CpG_file <- params[["CpG_file"]]
# 1) Convert data from .csv to .bed format
# load data
horvath_data <- read.csv(CpG_file, header = TRUE, sep = ";")
View(horvath_data)
# 1) Convert data from .csv to .bed format
# load data
CpG_locs <- read.csv(CpG_file, header = TRUE, sep = ";")
View(CpG_locs)
# get chromosomes vector in .bed file format
chr_list <- list(CpG_locs[,"Chr"])
# FUNCTIONS
source("functions.R")
# get chromosomes vector in .bed file format
chr_list <- list(CpG_locs[,"Chr"])
chromosomes <- lapply(chr_list, chr_string)
# get start end end positions
starts <-  CpG_locs[, "MapInfo"]
ends <-  CpG_locs[, "MapInfo"] + 1
coefficients <- CpG_locs[,"CoefficientTraining"]
# create data frame with .bed file appropriate format
CpG_locs <-  cbind(data.frame(chromosomes), starts, ends, coefficients)
View(CpG_locs)
# 1) Convert data from .csv to .bed format
# load data
CpG_locs <- read.csv(CpG_file, header = TRUE, sep = ";")
View(CpG_locs)
# create data frame with .bed file appropriate format
CpG_locs <-  cbind(data.frame(chromosomes), starts, ends, coefficients)
View(CpG_locs)
names(CpG_locs) <- c("chromosome", "start", "end", "coefficient")
# IMPORTS
library(dplyr)
window_size <- window_size[1]
window_size <- window_sizes[1]
# 2) Lift over coordinates
if (chain_file=="-" | chain_file=="" | chain_file=="/" | chain_file=="\\") {
#load the bed file containing genome coordinates
print("No lift over requested, proceeding without it.")
} else {
library(rtracklayer)
#import chain file
chain <- import.chain(chain_file)
#coerce dataframe into GRanges
ranges <- makeGRangesFromDataFrame(CpG_locs)
# use R implementation of Lift Over tool to convert ranges to hg38 coordinate system
hg38_ranges <- liftOver(ranges, chain)
# get the object in the right format and write to file
hg38_coordinates <- data.frame(iranges=hg38_ranges)
hg38_coordinates <- data.frame(cbind.data.frame(coordinates$chr, hg38_coordinates$iranges.start,
hg38_coordinates$iranges.end, coordinates$weight))
names(hg38_coordinates) <- c("chr", "start", "end", "weight")
write.table(hg38_coordinates, file=output_file, sep="\t", col.names = F, row.names = F, quote = F)
}
#import chain file
chain <- import.chain(chain_file)
library(rtracklayer)
#import chain file
chain <- import.chain(chain_file)
#coerce dataframe into GRanges
ranges <- makeGRangesFromDataFrame(CpG_locs)
# use R implementation of Lift Over tool to convert ranges to hg38 coordinate system
lifted_ranges <- liftOver(ranges, chain)
lifted_ranges
ranges
# get the object in the right format and write to file
CpG_locs <- data.frame(iranges=lifted_ranges)
View(CpG_locs)
# get the object in the right format and write to file
temp_df <- data.frame(iranges=lifted_ranges)
# create data frame with .bed file appropriate format
CpG_locs <-  cbind(data.frame(chromosomes), starts, ends, coefficients)
names(CpG_locs) <- c("chromosome", "start", "end", "coefficient")
# 2) Lift over coordinates
if (chain_file=="-" | chain_file=="" | chain_file=="/" | chain_file=="\\") {
#load the bed file containing genome coordinates
print("No lift over requested, proceeding without it.")
} else {
library(rtracklayer)
#import chain file
chain <- import.chain(chain_file)
#coerce dataframe into GRanges
ranges <- makeGRangesFromDataFrame(CpG_locs)
# use R implementation of Lift Over tool to convert ranges to hg38 coordinate system
lifted_ranges <- liftOver(ranges, chain)
# get the object in the right format and write to file
temp_df <- data.frame(iranges=lifted_ranges)
hg38_coordinates <- data.frame(cbind.data.frame(CpG_locs$chr, temp_df$iranges.start,
temp_df$iranges.end, CpG_locs$coefficients))
names(hg38_coordinates) <- c("chr", "start", "end", "weight")
write.table(hg38_coordinates, file=output_file, sep="\t", col.names = F, row.names = F, quote = F)
}
# use R implementation of Lift Over tool to convert ranges to hg38 coordinate system
lifted_ranges <- liftOver(ranges, chain)
# get the object in the right format and write to file
temp_df <- data.frame(iranges=lifted_ranges)
CpG_locs <- data.frame(cbind.data.frame(CpG_locs$chr, temp_df$iranges.start,
temp_df$iranges.end, CpG_locs$coefficients))
View(temp_df)
View(CpG_locs)
CpG_locs <- data.frame(cbind.data.frame(CpG_locs$chromosome, temp_df$iranges.start,
temp_df$iranges.end, CpG_locs$coefficients))
CpG_locs <- data.frame(cbind.data.frame(CpG_locs$chromosome, temp_df$iranges.start,
temp_df$iranges.end, CpG_locs$coefficient))
View(CpG_locs)
names(CpG_locs) <- c("chromosome", "start", "end", "coefficient")
# 3) Extend bases
CpG_locs <- CpG_locs %>% mutate(start=start-(window_size/2), end=end+(window_size/2))
# 3) Extend bases
CpG_locs <- CpG_locs %>% mutate(start=start-(window_size/2), end=end+(window_size/2)-1)
CpG_locs <- data.frame(cbind.data.frame(CpG_locs$chromosome, temp_df$iranges.start,
temp_df$iranges.end, CpG_locs$coefficient))
names(CpG_locs) <- c("chromosome", "start", "end", "coefficient")
# 3) Extend bases
CpG_locs <- CpG_locs %>% mutate(start=start-(window_size/2), end=end+(window_size/2)-1)
# 4) Load G4 data and merge both strands
G4_plus <- read.csv(G4_file_plus, header=F, sep="\t")
View(G4_plus)
G4_minus <- read.csv(G4_file_minus, header=F, sep="\t")
G4_all <- rbind.data.frame(G4_plus, G4_minus)
View(G4_all)
names(G4_locs) <- c(chromosome, start, end, score)
names(G4_locs) <- c("chromosome", "start", "end", "score")
G4_locs <- rbind.data.frame(G4_plus, G4_minus)
names(G4_locs) <- c("chromosome", "start", "end", "score")
View(G4_locs)
G4_locs <- G4_locs %>% arange(chromosome, start, end)
G4_locs <- G4_locs %>% arrange(chromosome, start, end)
View(G4_locs)
clear
clear()
dplyr
# IMPORTS
library(dplyr)
library(rjson)
library(stringr)
# FUNCTIONS
source("R_scripts/functions.R")
# load config.json file
params <- fromJSON(file="config.json")
CpG_file <- params[["CpG_file"]]
G4_file_plus <- params[["G4_file_plus"]]
G4_file_minus <- params[["G4_file_minus"]]
chain_file <- params[["chain_file"]]
genome_file <- params[["genome_file"]]
window_size_CpG_dist_plot <- params[["window_size_CpG_dist_plot"]]
all_CpGs_file <- params[["all_CpGs_file"]]
window_sizes <- params[["window_sizes"]]
# 1) Convert CpG data from .csv to .bed format
# load data
CpG_locs <- read.csv(CpG_file, header = TRUE, sep = ";")
# get chromosomes vector in .bed file format
chr_list <- list(CpG_locs[,"Chr"])
chromosomes <- lapply(chr_list, chr_string)
# get start end end positions
starts <-  CpG_locs[, "MapInfo"]
ends <-  CpG_locs[, "MapInfo"] + 1
coefficients <- CpG_locs[,"CoefficientTraining"]
# create data frame with .bed file appropriate format
CpG_locs <-  cbind(data.frame(chromosomes), starts, ends, coefficients)
names(CpG_locs) <- c("chromosome", "start", "end", "coefficient")
# 2) Lift over coordinates
if (chain_file=="-" | chain_file=="" | chain_file=="/" | chain_file=="\\") {
#load the bed file containing genome coordinates
print("No lift over requested, proceeding without it.")
} else {
library(rtracklayer)
#import chain file
chain <- import.chain(chain_file)
#coerce dataframe into GRanges
ranges <- makeGRangesFromDataFrame(CpG_locs)
# use R implementation of Lift Over tool to convert ranges to hg38 coordinate system
lifted_ranges <- liftOver(ranges, chain)
# get the object in the right format and write to file
temp_df <- data.frame(iranges=lifted_ranges)
CpG_locs <- data.frame(cbind.data.frame(CpG_locs$chromosome, temp_df$iranges.start,
temp_df$iranges.end, CpG_locs$coefficient))
names(CpG_locs) <- c("chromosome", "start", "end", "coefficient")
}
# 3) Extend bases
CpG_locs <- CpG_locs %>% mutate(start=start-(window_size/2), end=end+(window_size/2)-1)
window_size <- window_sizes[1]
# 3) Extend bases
CpG_locs <- CpG_locs %>% mutate(start=start-(window_size/2), end=end+(window_size/2)-1)
# 4) Load G4 data and catenate both strands
G4_plus <- read.csv(G4_file_plus, header=F, sep="\t")
G4_minus <- read.csv(G4_file_minus, header=F, sep="\t")
G4_locs <- rbind.data.frame(G4_plus, G4_minus)
names(G4_locs) <- c("chromosome", "start", "end", "score")
G4_locs <- G4_locs %>% arrange(chromosome, start, end)
View(G4_locs)
View(CpG_locs)

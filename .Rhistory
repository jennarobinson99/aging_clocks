group = factor(c(1, 1,1, 2, 2, 2))
group
x <- ~group
x
print(x)
x <- ~ 0+group
x
model.matrix(~0+group)
model.matrix(~group)
getwd()
setwd("D:/proj_epigen/aging_clocks")
library(Biostrings)
library(BSgenome.Hsapiens.UCSC.hg38)
# load genome
genome = BSgenome.Hsapiens.UCSC.hg38
chromosomes = seqnames(genome)[0:24]
pattern <- "CG"
current_chr <- genome$chr
for (chr in chromosomes) {
current_chr <- genome$chr
}
for (chr in chromosomes) {
current_chr <- genome[[chr]]
}
df
x = 1
debugSource('D:/proj_epigen/aging_clocks/find_all_CpGs.R', echo=TRUE)
f
n
n
Q
?countPattern
genome$chr1
x = genome$chr1
View(x)
x
genome[["chr1"]]
# get number of CpGs in all chromosomes
CpGs <- vector(mode='list', length=23)
i <-  0
total <- 0
for (chr in chromosomes) {
current_chr <- genome[[chr]]
n <- countPattern(pattern,current_chr)
CpGs[[i]] <- n
total <- total + n
i <- i + 1
}
CpGs[[23]] <- total
names(CpGs) <- c(chromosomes, 'total')
# get number of CpGs in all chromosomes
CpGs <- vector(mode='list', length=25)
names(CpGs) <- c(chromosomes, 'total')
i <-  0
total <- 0
for (chr in chromosomes) {
current_chr <- genome[[chr]]
n <- countPattern(pattern,current_chr)
CpGs[[i]] <- n
total <- total + n
i <- i + 1
}
for (chr in chromosomes) {
current_chr <- genome[[chr]]
n <- countPattern(pattern,current_chr)
CpGs[chr] <- n
total <- total + n
i <- i + 1
}
CpGs[[25]] <- total
library(tidyverse)
seqs <- matchPattern(pattern, genome$chr1)
View(seqs)
seqs
as.tibble(seqs)
as_tibble(seqs)
?as_tibble
str(seqs)
y <- as.data.frame(seqs)
View(y)
seqs[1]
seqs[[1]]
as(seq, "XStringSet")
seqs["start"]
seqs$ranges
as(seqs, "XStringSet")
as(seqs, "IRanges")
# get genomic coordinates for each CpG
seqs <- matchPattern(pattern, genome$chr1)
seqs <-  as(seqs, "IRanges")
View(seqs)
View(x)
seqs
starts <- start(seqs)
starts <- as.vector(start(seqs))
starts <- start(seqs)
ends <- ends(seqs)
ends <- end(seqs)
coordinates <- tibble(start = starts, end = ends)
View(coordinates)
coordinates <- tibble(chromosome = "chr1", start = starts, end = ends)
View(coordinates)
c2 <-  tibble(chromosome="chr2", start=starts,end=ends)
all <-rbind(coordinates, c2)
View(all)
CpG_coordinates <- tibble()
# get number of CpGs in all chromosomes and find genomic coordinates
CpG_occurence <- vector(mode='list', length=25)
names(CpG_occurence) <- c(chromosomes, 'total')
total <- 0
CpG_coordinates <- tibble()
# loop through chromosomes to get CpGs for each one
for (chr_name in chromosomes) {
current_chr <- genome[[chr_name]]
#count CpG occurence and save in named list
n <- countPattern(pattern, current_chr)
CpG_occurence[chr] <- n
total <- total + n
#match pattern to get genomic coordinates of each CpG
seqs <- matchPattern(pattern, current_chr) #gets XStringView object of coordinates
seqs <- as(seqs, "IRanges") #convert object to IRanges object
# get start and end coordinates, save in temporary tibble, then combine with
# data from other chromosomes
starts <- start(seqs)
ends <- end(seqs)
cur_chr_tibble <- tibble(chr=chr_name, start=starts, end=ends)
CpG_coordinates <- rbind(CpG_coordinates, cur_chr_tibble)
}
CpGs[[25]] <- total
View(CpG_occurence)
View(CpG_coordinates)
View(CpG_occurence)
View(CpGs)
# loop through chromosomes to get CpGs for each one
for (chr_name in chromosomes) {
current_chr <- genome[[chr_name]]
#count CpG occurence and save in named list
n <- countPattern(pattern, current_chr)
CpG_occurence[chr_name] <- n
total <- total + n
#match pattern to get genomic coordinates of each CpG
seqs <- matchPattern(pattern, current_chr) #gets XStringView object of coordinates
seqs <- as(seqs, "IRanges") #convert object to IRanges object
# get start and end coordinates, save in temporary tibble, then combine with
# data from other chromosomes
starts <- start(seqs)
ends <- end(seqs)
cur_chr_tibble <- tibble(chr=chr_name, start=starts, end=ends)
CpG_coordinates <- rbind(CpG_coordinates, cur_chr_tibble)
}
View(CpG_occurence)
View(CpG_coordinates)
# get number of CpGs in all chromosomes and find genomic coordinates
CpG_occurence <- vector(mode='list', length=25)
names(CpG_occurence) <- c(chromosomes, 'total')
total <- 0
CpG_coordinates <- tibble()
# loop through chromosomes to get CpGs for each one
for (chr_name in chromosomes) {
current_chr <- genome[[chr_name]]
#count CpG occurence and save in named list
n <- countPattern(pattern, current_chr)
CpG_occurence[chr_name] <- n
total <- total + n
#match pattern to get genomic coordinates of each CpG
seqs <- matchPattern(pattern, current_chr) #gets XStringView object of coordinates
seqs <- as(seqs, "IRanges") #convert object to IRanges object
# get start and end coordinates, save in temporary tibble, then combine with
# data from other chromosomes
starts <- start(seqs)
ends <- end(seqs)
cur_chr_tibble <- tibble(chr=chr_name, start=starts, end=ends)
CpG_coordinates <- rbind(CpG_coordinates, cur_chr_tibble)
}
CpGs_occurence[[25]] <- total
CpG_occurence[[25]] <- total
View(CpG_occurence)
View(CpG_coordinates)
# write data to file
# write coordinates to .bed file
write.table(CpG_coordinates, file="CpG_lists/bed_files/global_CpGs.bed", sep="\t", col.names = F, row.names = F, quote = F)
# write CpG occurances into .csv file
write.table(CpG_occurence, file="CpG_lists/csv_files/global_CpGs_occurence.csv", sep=",", col.names = T, row.names = F, quote = F)
ply window to CpG locations and save in extended CpG coordinates tibble
extension_bases <- 50
CpG_coord
#apply window to CpG locations and save in extended CpG coordinates tibble
extension_bases <- 50
CpG_coordinates_ext <- CpG_coordinates %>% mutate(start=start-extension_bases, end=start+extension_bases)
View(CpG_coordinates_ext)
View(CpG_coordinates_ext)
CpG_coordinates_ext <- CpG_coordinates %>% mutate(end=start+extension_bases, start=start-extension_bases)
# write extended coordinates table (where window function was applied)
write.table(CpG_coordinates_ext, file="CpG_lists/bed_files/global_CpGs_ext.bed", sep="\t", col.names = F, row.names = F, quote = F)
#load the bed file containing genome coordinates
coordinates <- read.csv("Cpg_lists/bed_files/global_CpGs_ext.bed", header=F, col.names=c("chr", "start", "end"), sep='\t')
#add row with CpG location
coordinates <-mutate(coordinates, cpg_loc = (end-start)/2+start)
#get mean, standard deviation, min and maximum gap of CpG distances per chromosome
# plus other interesting statistics
window_length <- 100
gaps <- coordinates %>%
arrange(desc(cpg_loc)) %>%
group_by(chr) %>%
summarise(mean_gap = mean(lag(cpg_loc)-cpg_loc,na.rm=T),
std_gap = sd(lag(cpg_loc)-cpg_loc, na.rm=T),
min_gap = min(lag(cpg_loc)-cpg_loc, na.rm=T),
max_gap = max(lag(cpg_loc)-cpg_loc, na.rm=T),
number_of_CpGs=n(),
#neighbouring CpGs are ones that lie within a distance from each other
#that is smaller than half the base pair window
neighbouring_CpGs=sum((lag(cpg_loc)-cpg_loc) < window_length/2, na.rm=T)
) %>%
mutate(chromosome = as.integer(substr(chr, 4, 6))) %>%
arrange(chromosome)
View(gaps)
#record gap data in csv file
write.table(gaps, file="CpG_lists/csv_files/global_CpGs_gaps.csv", sep=",", col.names = T, row.names = F, quote = F)
# load data
horvath_data <- read.csv("./CpG_lists/csv_files/Horvath_clock_CpGs.csv", header = TRUE, sep = ";")
p = 613550 / 29401360
binom.test(14, 357, p=p, alternative="two.sided")
binom.test(20, 357, p=0.5, alternative="two.sided")
binom.test(14, 357, p=p, alternative="two.sided", conf.level = 0.99)
binom.test(14, 357, p=p, alternative="two.sided", conf.level = 0.90)
binom.test(14, 357, p=p, alternative="two.sided", conf.level = 0.85)
binom.test(14, 357, p=p, alternative="less", conf.level = 0.95)
binom.test(14, 357, p=p, alternative="greater", conf.level = 0.95)
binom.test(14, 357, p=p, alternative="two-sided", conf.level = 0.95)
binom.test(14, 357, p=p, alternative="two.sided", conf.level = 0.95)
binom.test(14, 357, p=p, alternative="greater", conf.level = 0.95)
binom.test(14, 357, p=p, alternative="smaller", conf.level = 0.95)
binom.test(14, 357, p=p, alternative="less", conf.level = 0.95)
binom.test(14, 357, p=p, alternative="two-sided", conf.level = 0.95)
binom.test(14, 357, p=p, alternative="two_sided", conf.level = 0.95)
binom.test(14, 357, p=p, alternative="two.sided", conf.level = 0.95)

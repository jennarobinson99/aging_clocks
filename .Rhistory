group = factor(c(1, 1,1, 2, 2, 2))
group
x <- ~group
x
print(x)
x <- ~ 0+group
x
model.matrix(~0+group)
model.matrix(~group)
getwd()
setwd("D:/proj_epigen/aging_clocks")
# IMPORTS
library(dplyr)
window_start<- 100
input_file <- "temp/CpGs_lifted.bed"
output_file <- "temp/CpGs_ext.bed"
pos_output_file <- paste(substr(output_file, 0, regexpr(pattern = ".",
text = output_file, fixed = TRUE)[1]-1),
"_pos.bed", sep="")
neg_output_file <- paste(substr(output_file, 0, regexpr(pattern = ".",
text = output_file, fixed = TRUE)[1]-1),
"_neg.bed", sep="")
u
# load data
CpG_locs <- read.csv(input_file, header=F, col.names=c("chr", "start", "end", "weight"), sep='\t')
View(CpG_locs)
# extend by window size
extension_bases <- round(window_size)
CpG_locs[,"start"] <- CpG_locs[,"start"] - extension_bases
CpG_lcos[,"ends"] <- CpG_locs[,"ends"] + extension_bases
CpG_lcos[,"ends"] <- CpG_locs[,"end"] + extension_bases
# extend by window size
extension_bases <- round(window_size)
window_size<- 100
# extend by window size
extension_bases <- round(window_size)
# extend by window size
extension_bases <- round(window_size/2)
CpG_locs[,"start"] <- CpG_locs[,"start"] - extension_bases
CpG_lcos[,"ends"] <- CpG_locs[,"end"] + extension_bases
CpG_lcos[,"end"] <- CpG_locs[,"end"] + extension_bases
CpG_locs[,"end"] <- CpG_locs[,"end"] + extension_bases
View(CpG_locs)
View(CpG_locs)
range <- FALSE
if (range){
} else {
extension_bases <- round(window_size/2)
CpG_locs[,"start"] <- CpG_locs[,"start"] - extension_bases
CpG_locs[,"end"] <- CpG_locs[,"end"] + extension_bases
}
View(CpG_locs)
View(CpG_locs)
# get positively CpGs in separate dataframe
CpGs_pos <- CpG_locs %>% filter(weight > 0)
View(CpGs_pos)
# get positively CpGs in separate dataframe
CpGs_pos <- CpG_locs %>% filter(weight > 0)
# write .bed file
write.table(CpGs_pos, file=pos_output_file, sep="\t", col.names = F, row.names = F, quote = F)
# get positively CpGs in separate dataframe
CpGs_neg <- CpG_locs %>% filter(weight < 0)
# write .bed file
write.table(CpGs_neg, file=neg_output_file, sep="\t", col.names = F, row.names = F, quote = F)
View(CpGs_neg)
# IMPORTS
library(dplyr)
window_size<- 100
range <- FALSE
input_file <- "temp/CpGs_lifted.bed"
output_file <- "temp/CpGs_ext.bed"
pos_output_file <- paste(substr(output_file, 0, regexpr(pattern = ".",
text = output_file, fixed = TRUE)[1]-1),
"_pos.bed", sep="")
neg_output_file <- paste(substr(output_file, 0, regexpr(pattern = ".",
text = output_file, fixed = TRUE)[1]-1),
"_neg.bed", sep="")
# load data
CpG_locs <- read.csv(input_file, header=F, col.names=c("chr", "start", "end", "weight"), sep='\t')
# extend by window size
if (range){
} else {
extension_bases <- round(window_size/2)
CpG_locs[,"start"] <- CpG_locs[,"start"] - extension_bases
CpG_locs[,"end"] <- CpG_locs[,"end"] + extension_bases
# write data to file
write.table(CpGs_locs, file=output_file, sep="\t", col.names = F, row.names = F, quote = F)
}
# get positively CpGs in separate dataframe
CpGs_pos <- CpG_locs %>% filter(weight > 0)
# write .bed file
write.table(CpGs_pos, file=pos_output_file, sep="\t", col.names = F, row.names = F, quote = F)
# get positively CpGs in separate dataframe
CpGs_neg <- CpG_locs %>% filter(weight < 0)
# write .bed file
write.table(CpGs_neg, file=neg_output_file, sep="\t", col.names = F, row.names = F, quote = F)
# get positively CpGs in separate dataframe
CpGs_pos <- CpG_locs %>% filter(weight > 0)
# write data to file
write.table(CpGs_locs, file=output_file, sep="\t", col.names = F, row.names = F, quote = F)
# write data to file
write.table(CpG_locs, file=output_file, sep="\t", col.names = F, row.names = F, quote = F)
chain_file <- data/chain_files/hg18ToHg38.over.chain
chain_file <- "data/chain_files/hg18ToHg38.over.chain"
chain <- import.chain(chain_file)
library(rtracklayer)
chain <- import.chain(chain_file)
View(chain)
#load the bed file containing genome coordinates
coordinates <- read.csv(input_file, header=F, col.names=c("chr", "start", "end", "weight"), sep='\t')
#coerce dataframe into GRanges
ranges <- makeGRangesFromDataFrame(coordinates)
# use R implementation of Lift Over tool to convert ranges to hg38 coordinate system
hg38_ranges <- liftOver(ranges, chain)
View(hg38_ranges)
# get the object in the right format and write to file
hg38_coordinates <- data.frame(iranges=hg38_ranges)
hg38_coordinates <- data.frame(cbind(coordinates$chr, hg38_coordinates$iranges.start,
hg38_coordinates$iranges.end, coordinates$weight))
View(hg38_coordinates)
View(hg38_coordinates)
chain_file <- "data/chain_files/hg18ToHg38.over.chai"
chain <- import.chain(chain_file)
?cbind
quit()

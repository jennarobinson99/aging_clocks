group = factor(c(1, 1,1, 2, 2, 2))
group
x <- ~group
x
print(x)
x <- ~ 0+group
x
model.matrix(~0+group)
model.matrix(~group)
getwd()
# IMPORTS
library(dplyr)
library(rjson)
setwd("D:/proj_epigen/aging_clocks")
# FUNCTIONS
source("R_scripts/functions.R")
# load config.json file
params <- fromJSON(file="config.json")
CpG_file <- params[["CpG_file"]]
G4_file_plus <- params[["G4_file_plus"]]
G4_file_minus <- params[["G4_file_minus"]]
chain_file <- params[["chain_file"]]
genome_file <- params[["genome_file"]]
window_size_CpG_dist_plot <- params[["window_size_CpG_dist_plot"]]
all_CpGs_file <- params[["all_CpGs_file"]]
window_sizes <- params[["window_sizes"]]
# 1) Load G4 data and catenate both strands
G4_locs <- load_G4_data(G4_file_plus, G4_file_minus)
# 2) Load CpG data and convert from .csv to .bed format
CpG_locs <- load_CpG_data(CpG_file = CpG_file)
# 3) Lift over coordinates
CpG_locs <- lift_over(coordinates=CpG_locs, chain_file=chain_file)
# 3.5) Get number of all CpGs and overlaps with G4s genome-wide (not aging clock, control case)
results_all_CpGs <- global_CpG_overlap(all_CpGs_file=all_CpGs_file, G4_locs=G4_locs,genome_file=genome_file)
View(results_all_CpGs)
write.table(results_all_CpGs, file="out/all_CpGs_props_all_G4s.csv", sep=";")
write.table(results_all_CpGs, file="out/all_CpGs_props_all_G4s.csv", sep=";", col.names = F)
write.table(results_all_CpGs, file="out/all_CpGs_props_all_G4s.csv", sep=";", col.names = F)
write.table(results_all_CpGs, file="out/all_CpGs_props_all_G4s.csv", sep=";", row.names = F)
# 1) Load G4 data and catenate both strands
G4_locs <- load_G4_data(G4_file_plus, G4_file_minus)
# 1) Load G4 data and catenate both strands
G4_locs <- load_G4_data(G4_file_plus)
# 3.5) Get number of all CpGs and overlaps with G4s genome-wide (not aging clock, control case)
results_all_CpGs <- global_CpG_overlap(all_CpGs_file=all_CpGs_file, G4_locs=G4_locs,genome_file=genome_file)
View(results_all_CpGs)
write.table(results_all_CpGs, file="out/all_CpGs_props_BG4_2016.csv", sep=";", row.names = F)
# load config.json file
params <- fromJSON(file="config.json")
CpG_file <- params[["CpG_file"]]
G4_file_plus <- params[["G4_file_plus"]]
G4_file_minus <- params[["G4_file_minus"]]
chain_file <- params[["chain_file"]]
genome_file <- params[["genome_file"]]
window_size_CpG_dist_plot <- params[["window_size_CpG_dist_plot"]]
all_CpGs_file <- params[["all_CpGs_file"]]
window_sizes <- params[["window_sizes"]]
# 1) Load G4 data and catenate both strands
G4_locs <- load_G4_data(G4_file_plus)
# 3.5) Get number of all CpGs and overlaps with G4s genome-wide (not aging clock, control case)
results_all_CpGs <- global_CpG_overlap(all_CpGs_file=all_CpGs_file, G4_locs=G4_locs,genome_file=genome_file)
View(results_all_CpGs)
write.table(results_all_CpGs, file="out/all_CpGs_props_BG4_2018.csv", sep=";", row.names = F)
?phyper
# IMPORTS
library(dplyr)
library(rjson)
# FUNCTIONS
source("R_scripts/functions.R")
# load config.json file
params <- fromJSON(file="config.json")
CpG_file <- params[["CpG_file"]]
G4_file_plus <- params[["G4_file_plus"]]
G4_file_minus <- params[["G4_file_minus"]]
chain_file <- params[["chain_file"]]
genome_file <- params[["genome_file"]]
window_size_CpG_dist_plot <- params[["window_size_CpG_dist_plot"]]
all_CpGs_file <- params[["all_CpGs_file"]]
window_sizes <- params[["window_sizes"]]
# 1) Load G4 data and catenate both strands
G4_locs <- load_G4_data(G4_file_plus)
# 2) Load CpG data and convert from .csv to .bed format
CpG_locs <- load_CpG_data(CpG_file = CpG_file)
# 3) Lift over coordinates
CpG_locs <- lift_over(coordinates=CpG_locs, chain_file=chain_file)
# 3.5b) Or read data from file (SHORT execution time)
results_all_CpGs <- read.csv(file="out/all_CpGs_props_all_G4s.csv", header=T, sep=";")
View(results_all_CpGs)
# 4) Analyse window size
results <- analyse_window_size(query=CpG_locs, search_set=G4_locs, genome_file=genome_file, window_sizes=window_sizes, all_CpGs_props=results_all_CpGs)
# FUNCTIONS
source("R_scripts/functions.R")
# 4) Analyse window size
results <- analyse_window_size(query=CpG_locs, search_set=G4_locs, genome_file=genome_file, window_sizes=window_sizes, all_CpGs_props=results_all_CpGs)
# FUNCTIONS
source("R_scripts/functions.R")
# 3.5b) Or read data from file (SHORT execution time)
results_all_CpGs <- read.csv(file="out/all_CpGs_props_all_G4s.csv", header=T, sep=";")
# 4) Analyse window size
results <- analyse_window_size(query=CpG_locs, search_set=G4_locs, genome_file=genome_file, window_sizes=window_sizes, all_CpGs_props=results_all_CpGs)
debugSource('D:/proj_epigen/aging_clocks/R_scripts/functions.R', echo=TRUE)
debugSource('D:/proj_epigen/aging_clocks/R_scripts/functions.R', echo=TRUE)
debugSource('D:/proj_epigen/aging_clocks/R_scripts/functions.R', echo=TRUE)
# 4) Analyse window size
results <- analyse_window_size(query=CpG_locs, search_set=G4_locs, genome_file=genome_file, window_sizes=window_sizes, all_CpGs_props=results_all_CpGs)
all_CpGs_props[1]
all_CpGs_props[[1]]
# 4) Analyse window size
results <- analyse_window_size(query=CpG_locs, search_set=G4_locs, genome_file=genome_file, window_sizes=window_sizes, all_CpGs_props=results_all_CpGs)
debugSource('D:/proj_epigen/aging_clocks/R_scripts/functions.R', echo=TRUE)
# 4) Analyse window size
results <- analyse_window_size(query=CpG_locs, search_set=G4_locs, genome_file=genome_file, window_sizes=window_sizes, all_CpGs_props=results_all_CpGs)
source('D:/proj_epigen/aging_clocks/R_scripts/functions.R', echo=TRUE)
# 4) Analyse window size
results <- analyse_window_size(query=CpG_locs, search_set=G4_locs, genome_file=genome_file, window_sizes=window_sizes, all_CpGs_props=results_all_CpGs)
# FUNCTIONS
source("R_scripts/functions.R")
# 4) Analyse window size
results <- analyse_window_size(query=CpG_locs, search_set=G4_locs, genome_file=genome_file, window_sizes=window_sizes, all_CpGs_props=results_all_CpGs)
View(results)
source('D:/proj_epigen/aging_clocks/R_scripts/functions.R', echo=TRUE)
# 3.5a) Get number of all CpGs and overlaps with G4s genome-wide (not aging clock, control case) (LONG execution time)
results_all_CpGs <- global_CpG_overlap(all_CpGs_file=all_CpGs_file, G4_locs=G4_locs,genome_file=genome_file, reduce=T)
View(results_all_CpGs)
# 4) Analyse window size
results <- analyse_window_size(query=CpG_locs, search_set=G4_locs, genome_file=genome_file, window_sizes=window_sizes, all_CpGs_props=results_all_CpGs)
View(results)
source('D:/proj_epigen/aging_clocks/R_scripts/functions.R', echo=TRUE)
# FUNCTIONS
source("R_scripts/functions.R")
# 4) Analyse window size
results <- analyse_window_size(query=CpG_locs, search_set=G4_locs, genome_file=genome_file, window_sizes=window_sizes, all_CpGs_props=results_all_CpGs)
View(results)
# 3.5a) Get number of all CpGs and overlaps with G4s genome-wide (not aging clock, control case) (LONG execution time)
results_all_CpGs <- global_CpG_overlap(all_CpGs_file=all_CpGs_file, G4_locs=G4_locs,genome_file=genome_file, reduce=F)
View(results_all_CpGs)
View(results_all_CpGs)
# 1) Load G4 data and catenate both strands
G4_locs <- load_G4_data(G4_file_plus)
View(results_all_CpGs)
# 3.5a) Get number of all CpGs and overlaps with G4s genome-wide (not aging clock, control case) (LONG execution time)
results_all_CpGs <- global_CpG_overlap(all_CpGs_file=all_CpGs_file, G4_locs=G4_locs,genome_file=genome_file, reduce=F)
View(results_all_CpGs)
debugSource('D:/proj_epigen/aging_clocks/R_scripts/functions.R', echo=TRUE)
# 3.5a) Get number of all CpGs and overlaps with G4s genome-wide (not aging clock, control case) (LONG execution time)
results_all_CpGs <- global_CpG_overlap(all_CpGs_file=all_CpGs_file, G4_locs=G4_locs,genome_file=genome_file, reduce=F)
debugSource('D:/proj_epigen/aging_clocks/R_scripts/functions.R', echo=TRUE)
# 3.5a) Get number of all CpGs and overlaps with G4s genome-wide (not aging clock, control case) (LONG execution time)
results_all_CpGs <- global_CpG_overlap(all_CpGs_file=all_CpGs_file, G4_locs=G4_locs,genome_file=genome_file, reduce=F)
# 3.5a) Get number of all CpGs and overlaps with G4s genome-wide (not aging clock, control case) (LONG execution time)
results_all_CpGs <- global_CpG_overlap(all_CpGs_file=all_CpGs_file, G4_locs=G4_locs,genome_file=genome_file, reduce=T)
